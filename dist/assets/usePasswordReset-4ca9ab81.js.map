{"version":3,"file":"usePasswordReset-4ca9ab81.js","sources":["../../src/hooks/usePasswordReset.ts"],"sourcesContent":["import { auth } from '@/firebase'\nimport { useToast } from '@chakra-ui/react'\nimport { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\n\nimport { routes } from '@/layout/routes'\nimport { firebaseErrorMap } from '@/lib/constants'\nimport {\n  confirmPasswordReset,\n  EmailAuthProvider,\n  reauthenticateWithCredential,\n  sendPasswordResetEmail,\n  updatePassword,\n} from 'firebase/auth'\n\nexport const usePasswordReset = () => {\n  const [error, setError] = useState('')\n  const [loading, setLoading] = useState(false)\n\n  const navigate = useNavigate()\n  const toast = useToast()\n\n  const passwordResetEmail = async (email: string) => {\n    setLoading(true)\n    if (!email) {\n      setError('Please enter your email')\n      toast({\n        title: 'Password reset failed',\n        description: 'Please enter your email',\n        status: 'error',\n        isClosable: true,\n        position: 'top',\n        duration: 5000,\n        variant: 'solid',\n      })\n      return\n    }\n\n    try {\n      await sendPasswordResetEmail(auth, email)\n      toast({\n        title: 'Password reset email sent, please check your inbox',\n        status: 'success',\n        isClosable: true,\n        position: 'top',\n        duration: 5000,\n        colorScheme: 'cyan',\n        variant: 'solid',\n      })\n      navigate(routes.LOGIN)\n    } catch (error: any) {\n      const errorMessage = firebaseErrorMap.get(error.code)\n      setError(errorMessage || error.message)\n      toast({\n        title: 'Password reset failed',\n        description: errorMessage || error.message,\n        status: 'error',\n        isClosable: true,\n        position: 'top',\n        duration: 5000,\n        variant: 'solid',\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const confirmPassReset = async (code: string, newPassword: string) => {\n    setLoading(true)\n    if (!code) {\n      setError('Please enter your code')\n      toast({\n        title: 'Password reset failed',\n        description: 'Please enter your code',\n        status: 'error',\n        isClosable: true,\n        position: 'top',\n        duration: 5000,\n        variant: 'solid',\n      })\n      return\n    }\n    if (!newPassword) {\n      setError('Please enter your new password')\n      toast({\n        title: 'Password reset failed',\n        description: 'Please enter your new password',\n        status: 'error',\n        isClosable: true,\n        position: 'top',\n        duration: 5000,\n        variant: 'solid',\n      })\n      return\n    }\n    if (newPassword.length < 6) {\n      setError('Password must be at least 6 characters')\n      toast({\n        title: 'Password reset failed',\n        description: 'Password must be at least 6 characters',\n        status: 'error',\n        isClosable: true,\n        position: 'top',\n        duration: 5000,\n        variant: 'solid',\n      })\n      return\n    }\n    try {\n      // const auth = getAuth()\n      await confirmPasswordReset(auth, code, newPassword)\n      toast({\n        title: 'Password reset successful',\n        status: 'success',\n        isClosable: true,\n        position: 'top',\n        duration: 5000,\n        colorScheme: 'cyan',\n        variant: 'solid',\n      })\n      navigate(routes.LOGIN)\n    } catch (error: any) {\n      const errorMessage = firebaseErrorMap.get(error.code)\n      setError(errorMessage || error.message)\n      toast({\n        title: 'Password reset failed',\n        description: errorMessage || error.message,\n        status: 'error',\n        isClosable: true,\n        position: 'top',\n        duration: 5000,\n        variant: 'solid',\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const updatePass = async (newPassword: string, currentPassword: string) => {\n    setLoading(true)\n    const user = auth.currentUser\n\n    if (!newPassword) {\n      setError('Please enter your new password')\n      toast({\n        title: 'Password reset failed',\n        description: 'Please enter your new password',\n        status: 'error',\n        isClosable: true,\n        position: 'top',\n        duration: 5000,\n        variant: 'solid',\n      })\n      return\n    }\n    if (!currentPassword) {\n      setError('Password must be at least 6 characters')\n      toast({\n        title: 'Password reset failed',\n        description: 'Password must be at least 6 characters',\n        status: 'error',\n        isClosable: true,\n        position: 'top',\n        duration: 5000,\n        variant: 'solid',\n      })\n      return\n    }\n    if (user?.email) {\n      const credential = EmailAuthProvider.credential(\n        user.email,\n        currentPassword\n      )\n      try {\n        await reauthenticateWithCredential(user, credential)\n        await updatePassword(user, newPassword)\n        toast({\n          title: 'Password reset successful',\n          status: 'success',\n          isClosable: true,\n          position: 'top',\n          duration: 5000,\n          colorScheme: 'cyan',\n          variant: 'solid',\n        })\n        navigate(routes.LOGIN)\n      } catch (error: any) {\n        const errorMessage = firebaseErrorMap.get(error.code)\n        setError(errorMessage || error.message)\n        toast({\n          title: 'Password reset failed',\n          description: errorMessage || error.message,\n          status: 'error',\n          isClosable: true,\n          position: 'top',\n          duration: 5000,\n          variant: 'solid',\n        })\n      } finally {\n        setLoading(false)\n      }\n    }\n  }\n  return { error, loading, passwordResetEmail, confirmPassReset, updatePass }\n}\n"],"names":["usePasswordReset","error","setError","useState","loading","setLoading","navigate","useNavigate","toast","useToast","email","sendPasswordResetEmail","auth","routes","errorMessage","firebaseErrorMap","code","newPassword","confirmPasswordReset","currentPassword","user","credential","EmailAuthProvider","reauthenticateWithCredential","updatePassword"],"mappings":"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"}