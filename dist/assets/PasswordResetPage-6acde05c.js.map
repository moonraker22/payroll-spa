{"version":3,"file":"PasswordResetPage-6acde05c.js","sources":["../../src/pages/PasswordReset/PasswordResetPage.tsx"],"sourcesContent":["import { PasswordResetSchema, PasswordResetType } from '@/data/paySchema'\nimport { auth } from '@/firebase'\nimport { useStore } from '@/stores/store'\nimport {\n  Box,\n  Button,\n  Center,\n  Container,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Heading,\n  HStack,\n  Input,\n  Text,\n  useColorModeValue,\n} from '@chakra-ui/react'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { motion as m } from 'framer-motion'\nimport { useEffect, useRef, useState } from 'react'\nimport { SubmitHandler, useForm } from 'react-hook-form'\nimport { Form, Link as RouterLink } from 'react-router-dom'\n\nimport SlideIn from '@/components/isGoogleSlideIn'\nimport { usePasswordReset } from '@/hooks/usePasswordReset'\nimport { routes } from '@/layout/routes'\n\nexport default function PasswordReset() {\n  const [isGoogle, setIsGoogle] = useState(false)\n  const user = useStore()\n  const {\n    register,\n    handleSubmit,\n    watch,\n    setError,\n    clearErrors,\n    setFocus,\n    formState: { errors, isDirty, isSubmitting, isValid, touchedFields },\n  } = useForm<PasswordResetType>({\n    resolver: zodResolver(PasswordResetSchema),\n  })\n\n  const { updatePass, error } = usePasswordReset()\n\n  const onSubmit: SubmitHandler<PasswordResetType> = async (data) => {\n    try {\n      await updatePass(data.password, data.currentPassword)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  useEffect(() => {\n    setFocus('password')\n  }, [])\n\n  const bg = useColorModeValue('white', ' gray.800')\n\n  const password = watch('password')\n  const passwordConfirmation = watch('passwordConfirmation')\n\n  const passwordMatch = (value: string) => {\n    if (password !== value) {\n      setError('passwordConfirmation', {\n        type: 'manual',\n        message: 'Passwords should match!',\n      })\n    } else {\n      clearErrors('passwordConfirmation')\n    }\n  }\n  useEffect(() => {\n    passwordMatch(passwordConfirmation)\n  }, [password, passwordConfirmation])\n\n  const isAuthenticatedWithGoogle = () => {\n    const user = auth?.currentUser\n    if (user !== null) {\n      if (user?.providerData[0]?.providerId === 'google.com') {\n        return true\n      }\n    }\n    return false\n  }\n\n  const canSubmit =\n    !isAuthenticatedWithGoogle() &&\n    isDirty &&\n    isValid &&\n    password === passwordConfirmation\n\n  useEffect(() => {\n    setIsGoogle(isAuthenticatedWithGoogle())\n  }, [])\n\n  // hidden email input for password managers\n  const usernameRef = useRef<HTMLInputElement>(null)\n  useEffect(() => {\n    if (usernameRef.current) {\n      usernameRef.current.value = user.userEmail\n    }\n  }, [user.userEmail])\n\n  return (\n    <Container maxW=\"container.xl\" centerContent mt={10}>\n      <Center>\n        <Heading\n          mt=\"10\"\n          as={m.h1}\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          bgGradient=\"linear(to-b, #42047e, #07f49e)\"\n          bgClip=\"text\"\n          fontSize={['3xl', '3xl', '4xl']}\n          fontWeight=\"extrabold\"\n        >\n          Update Password\n        </Heading>\n      </Center>\n      <m.div\n        initial={{ opacity: 0, y: 80, scale: 0.8 }}\n        animate={{ opacity: 1, y: 0, scale: [0.9, 1.2, 1] }}\n        transition={{\n          type: 'spring',\n          stiffness: 90,\n\n          damping: 15,\n        }}\n        exit={{ opacity: 0 }}\n      >\n        <Box\n          bg={bg}\n          border=\"2px\"\n          borderColor=\"gray.700\"\n          boxShadow=\"dark-lg\"\n          p=\"5\"\n          rounded=\"md\"\n          mt={10}\n          mb={10}\n          w=\"50vw\"\n          maxW=\"500px\"\n          minW=\"350px\"\n        >\n          <Box p=\"3\">\n            <Form onSubmit={handleSubmit(onSubmit)}>\n              <Box my={2}>\n                <Input\n                  type=\"hidden\"\n                  autoComplete=\"email\"\n                  ref={usernameRef}\n                  placeholder=\"username\"\n                />\n                <FormControl\n                  isInvalid={errors.password ? true : false}\n                  isRequired\n                  variant=\"floating\"\n                >\n                  <Input\n                    {...register('password')}\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    autoComplete=\"new-password\"\n                    mb=\"3\"\n                  />\n                  <FormLabel htmlFor=\"password\">Password:</FormLabel>\n                  <FormErrorMessage>\n                    {errors.password && errors.password.message}\n                  </FormErrorMessage>\n                </FormControl>\n              </Box>\n              <Box my={2}>\n                <FormControl\n                  isInvalid={errors.passwordConfirmation ? true : false}\n                  isRequired\n                  variant=\"floating\"\n                >\n                  <Input\n                    {...register('passwordConfirmation')}\n                    id=\"passwordConfirmation\"\n                    type=\"password\"\n                    placeholder=\"Password Confirmation\"\n                    autoComplete=\"new-password\"\n                    mb=\"3\"\n                  />\n                  <FormLabel htmlFor=\"passwordConfirmation\">\n                    Password Confirmation:\n                  </FormLabel>\n                  <FormErrorMessage>\n                    {errors.passwordConfirmation &&\n                      errors.passwordConfirmation.message}\n                  </FormErrorMessage>\n                </FormControl>\n              </Box>\n              <Box my={2}>\n                <FormControl\n                  isInvalid={errors.currentPassword ? true : false}\n                  isRequired\n                  variant=\"floating\"\n                >\n                  <Input\n                    {...register('currentPassword')}\n                    id=\"currentPassword\"\n                    type=\"password\"\n                    placeholder=\"Current Password\"\n                    autoComplete=\"new-password\"\n                    mb=\"1\"\n                  />\n                  <FormLabel htmlFor=\"currentPassword\">\n                    Current Password:\n                  </FormLabel>\n                  <FormErrorMessage>\n                    {errors.currentPassword && errors.currentPassword.message}\n                  </FormErrorMessage>\n                </FormControl>\n              </Box>\n\n              <Center my={2}>\n                <Button\n                  my={4}\n                  w=\"full\"\n                  colorScheme=\"cyan\"\n                  isLoading={isSubmitting}\n                  type=\"submit\"\n                  size=\"lg\"\n                  disabled={!canSubmit}\n                  variant=\"outline\"\n                >\n                  Submit\n                </Button>\n              </Center>\n              <HStack spacing=\"1\" justify=\"center\">\n                <Text color=\"muted\">Go back to</Text>\n                <Button\n                  as={RouterLink}\n                  to={routes.DASHBOARD}\n                  variant=\"link\"\n                  colorScheme=\"cyan\"\n                >\n                  Dashboard\n                </Button>\n              </HStack>\n            </Form>\n          </Box>\n        </Box>\n      </m.div>\n      <SlideIn isGoogle={isGoogle} />\n    </Container>\n  )\n}\n"],"names":["PasswordReset","isGoogle","setIsGoogle","useState","user","useStore","register","handleSubmit","watch","setError","clearErrors","setFocus","errors","isDirty","isSubmitting","isValid","touchedFields","useForm","zodResolver","PasswordResetSchema","updatePass","error","usePasswordReset","onSubmit","data","useEffect","bg","useColorModeValue","password","passwordConfirmation","passwordMatch","value","isAuthenticatedWithGoogle","_a","auth","canSubmit","usernameRef","useRef","Container","jsx","Center","Heading","m","Box","Form","jsxs","Input","FormControl","FormLabel","FormErrorMessage","Button","HStack","Text","RouterLink","routes","SlideIn"],"mappings":"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"}