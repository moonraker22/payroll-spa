{"version":3,"file":"usePasswordReset-ac5be2ee.js","sources":["../../src/hooks/usePasswordReset.ts"],"sourcesContent":["//@ts-nocheck\nimport { auth } from '@/firebase'\nimport { useToast } from '@chakra-ui/react'\nimport { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\n\nimport {\n  confirmPasswordReset,\n  EmailAuthProvider,\n  reauthenticateWithCredential,\n  sendPasswordResetEmail,\n  updatePassword,\n} from 'firebase/auth'\nimport { routes } from '../lib/routes'\n\nexport const usePasswordReset = () => {\n  const [error, setError] = useState('')\n  const [loading, setLoading] = useState(false)\n\n  const navigate = useNavigate()\n  const toast = useToast()\n\n  const passwordResetEmail = async (email: string) => {\n    setLoading(true)\n    if (!email) {\n      setError('Please enter your email')\n      toast({\n        title: 'Password reset failed',\n        description: 'Please enter your email',\n        status: 'error',\n        isClosable: true,\n        position: 'top',\n        duration: 5000,\n        variant: 'solid',\n      })\n      return\n    }\n\n    try {\n      await sendPasswordResetEmail(auth, email)\n      toast({\n        title: 'Password reset email sent, please check your inbox',\n        status: 'success',\n        isClosable: true,\n        position: 'top',\n        duration: 5000,\n        colorScheme: 'cyan',\n        variant: 'solid',\n      })\n      navigate(routes.LOGIN)\n    } catch (error: any) {\n      setError(error.message)\n      toast({\n        title: 'Password reset failed',\n        description: error.message,\n        status: 'error',\n        isClosable: true,\n        position: 'top',\n        duration: 5000,\n        variant: 'solid',\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const confirmPassReset = async (code: string, newPassword: string) => {\n    setLoading(true)\n    if (!code) {\n      setError('Please enter your code')\n      toast({\n        title: 'Password reset failed',\n        description: 'Please enter your code',\n        status: 'error',\n        isClosable: true,\n        position: 'top',\n        duration: 5000,\n        variant: 'solid',\n      })\n      return\n    }\n    if (!newPassword) {\n      setError('Please enter your new password')\n      toast({\n        title: 'Password reset failed',\n        description: 'Please enter your new password',\n        status: 'error',\n        isClosable: true,\n        position: 'top',\n        duration: 5000,\n        variant: 'solid',\n      })\n      return\n    }\n    if (newPassword.length < 6) {\n      setError('Password must be at least 6 characters')\n      toast({\n        title: 'Password reset failed',\n        description: 'Password must be at least 6 characters',\n        status: 'error',\n        isClosable: true,\n        position: 'top',\n        duration: 5000,\n        variant: 'solid',\n      })\n      return\n    }\n    try {\n      // const auth = getAuth()\n      await confirmPasswordReset(auth, code, newPassword)\n      toast({\n        title: 'Password reset successful',\n        status: 'success',\n        isClosable: true,\n        position: 'top',\n        duration: 5000,\n        colorScheme: 'cyan',\n        variant: 'solid',\n      })\n      navigate(routes.LOGIN)\n    } catch (error: any) {\n      setError(error.message)\n      toast({\n        title: 'Password reset failed',\n        description: error.message,\n        status: 'error',\n        isClosable: true,\n        position: 'top',\n        duration: 5000,\n        variant: 'solid',\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const updatePass = async (newPassword: string, currentPassword: string) => {\n    setLoading(true)\n\n    if (!newPassword) {\n      setError('Please enter your new password')\n      toast({\n        title: 'Password reset failed',\n        description: 'Please enter your new password',\n        status: 'error',\n        isClosable: true,\n        position: 'top',\n        duration: 5000,\n        variant: 'solid',\n      })\n      return\n    }\n    if (!currentPassword) {\n      setError('Password must be at least 6 characters')\n      toast({\n        title: 'Password reset failed',\n        description: 'Password must be at least 6 characters',\n        status: 'error',\n        isClosable: true,\n        position: 'top',\n        duration: 5000,\n        variant: 'solid',\n      })\n      return\n    }\n    try {\n      const credential = EmailAuthProvider.credential(\n        auth.currentUser.email,\n        currentPassword\n      )\n\n      await reauthenticateWithCredential(auth.currentUser, credential)\n      // const auth = getAuth()\n      const res = await updatePassword(auth.currentUser, newPassword)\n      console.log(res)\n      toast({\n        title: 'Password reset successful',\n        status: 'success',\n        isClosable: true,\n        position: 'top',\n        duration: 5000,\n        colorScheme: 'cyan',\n        variant: 'solid',\n      })\n      navigate('/login')\n    } catch (error) {\n      setError(error.message)\n      toast({\n        title: 'Password reset failed',\n        description: error.message,\n        status: 'error',\n        isClosable: true,\n        position: 'top',\n        duration: 5000,\n        variant: 'solid',\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return { error, loading, passwordResetEmail, confirmPassReset, updatePass }\n}\n"],"names":["usePasswordReset","error","setError","useState","loading","setLoading","navigate","useNavigate","toast","useToast","email","sendPasswordResetEmail","auth","routes","code","newPassword","confirmPasswordReset","currentPassword","credential","EmailAuthProvider","reauthenticateWithCredential","res","updatePassword"],"mappings":"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"}