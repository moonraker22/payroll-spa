{"version":3,"file":"RegistrationPage-dfb31c19.js","sources":["../../src/pages/Registration/RegistrationPage.tsx"],"sourcesContent":["import { Register } from '@/data/paySchema'\nimport { useRegister } from '@/hooks/useAuth'\nimport { useGoogleAuth } from '@/hooks/useGoogleAuth'\nimport { routes } from '@/lib/routes'\nimport { useStore } from '@/stores/store'\nimport {\n  Box,\n  Button,\n  Center,\n  Container,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Heading,\n  Input,\n  Text,\n  useColorModeValue,\n} from '@chakra-ui/react'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { motion as m } from 'framer-motion'\nimport { useEffect } from 'react'\nimport { SubmitHandler, useForm } from 'react-hook-form'\nimport { Form, Link as RouterLink, useNavigate } from 'react-router-dom'\nimport { GoogleIcon } from '../Login/GoogleIcon'\n\ntype RegistrationInputs = {\n  email: string\n  password: string\n  passwordConfirmation: string\n}\n\nexport default function Registration() {\n  const snap = useStore()\n  const navigate = useNavigate()\n\n  useEffect(() => {\n    if (snap.userId) {\n      navigate(routes.DASHBOARD)\n    }\n  }, [snap.userId])\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    setError,\n    clearErrors,\n    setFocus,\n    formState: { errors, isDirty, isSubmitting, isValid, touchedFields },\n  } = useForm<RegistrationInputs>({\n    resolver: zodResolver(Register),\n  })\n\n  const { register: registerUser, isLoading } = useRegister()\n\n  const onSubmit: SubmitHandler<RegistrationInputs> = async (data) => {\n    try {\n      registerUser({ email: data.email, password: data.password })\n      // navigate('/')\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  useEffect(() => {\n    setFocus('email')\n  }, [])\n\n  const bg = useColorModeValue('white', ' gray.800')\n  const textColor = useColorModeValue('gray.800', 'gray.200')\n  const placeholderColor = useColorModeValue('gray.400', 'gray.500')\n\n  const password = watch('password')\n  const passwordConfirmation = watch('passwordConfirmation')\n\n  const passwordMatch = (value: string) => {\n    if (password !== value) {\n      setError('passwordConfirmation', {\n        type: 'manual',\n        message: 'Passwords should match!',\n      })\n    } else {\n      clearErrors('passwordConfirmation')\n    }\n  }\n  useEffect(() => {\n    passwordMatch(passwordConfirmation)\n  }, [password, passwordConfirmation])\n\n  const canSubmit = isDirty && isValid && password === passwordConfirmation\n\n  const {\n    googleLogin,\n    isLoading: googleLoading,\n    error: googleError,\n  } = useGoogleAuth()\n\n  const googleSubmit = async () => {\n    try {\n      googleLogin()\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  return (\n    <Container maxW=\"container.xl\" centerContent mt={5}>\n      <m.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n      >\n        <Center>\n          <Heading\n            mt=\"10\"\n            fontSize={['4xl', '4xl', '5xl']}\n            as={m.h1}\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            bgGradient=\"linear(to-b, #42047e, #07f49e)\"\n            bgClip=\"text\"\n            fontWeight=\"extrabold\"\n          >\n            Register\n          </Heading>\n        </Center>\n        <m.div\n          initial={{ opacity: 0, y: 80, scale: 0.8 }}\n          animate={{ opacity: 1, y: 0, scale: [0.9, 1.2, 1] }}\n          transition={{\n            type: 'spring',\n            stiffness: 90,\n\n            damping: 15,\n          }}\n          exit={{ opacity: 0 }}\n        >\n          <Box\n            bg={bg}\n            border=\"2px\"\n            borderColor=\"cyan.600\"\n            boxShadow=\"dark-lg\"\n            p=\"5\"\n            rounded=\"md\"\n            mt={10}\n            mb={10}\n            w=\"50vw\"\n            maxW=\"450px\"\n            minW=\"350px\"\n          >\n            <Box p=\"3\">\n              <Form onSubmit={handleSubmit(onSubmit)}>\n                <Box my={2}>\n                  <FormControl\n                    isInvalid={errors.email ? true : false}\n                    isRequired\n                    variant=\"floating\"\n                  >\n                    <Input\n                      {...register('email')}\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"Email\"\n                      autoComplete=\"email\"\n                      mb=\"5\"\n                      _placeholder={{ color: placeholderColor }}\n                    />\n                    <FormLabel htmlFor=\"email\">Email:</FormLabel>\n                    <FormErrorMessage>\n                      {errors.email && errors.email.message}\n                    </FormErrorMessage>\n                  </FormControl>\n                </Box>\n                <Box my={2}>\n                  <FormControl\n                    isInvalid={errors.password ? true : false}\n                    isRequired\n                    variant=\"floating\"\n                  >\n                    <Input\n                      {...register('password')}\n                      id=\"password\"\n                      type=\"password\"\n                      placeholder=\"Password\"\n                      autoComplete=\"new-password\"\n                      mb=\"5\"\n                      _placeholder={{ color: placeholderColor }}\n                    />\n                    <FormLabel htmlFor=\"password\">Password:</FormLabel>\n                    <FormErrorMessage>\n                      {errors.password && errors.password.message}\n                    </FormErrorMessage>\n                  </FormControl>\n                </Box>\n                <Box my={2}>\n                  <FormControl\n                    isInvalid={errors.passwordConfirmation ? true : false}\n                    isRequired\n                    variant=\"floating\"\n                  >\n                    <Input\n                      {...register('passwordConfirmation')}\n                      id=\"passwordConfirmation\"\n                      type=\"password\"\n                      placeholder=\"Password Confirmation\"\n                      autoComplete=\"new-password\"\n                      mb=\"2\"\n                      _placeholder={{ color: placeholderColor }}\n                    />\n                    <FormLabel htmlFor=\"passwordConfirmation\">\n                      Password Confirmation:\n                    </FormLabel>\n                    <FormErrorMessage>\n                      {errors.passwordConfirmation &&\n                        errors.passwordConfirmation.message}\n                    </FormErrorMessage>\n                  </FormControl>\n                </Box>\n\n                <Center my={2}>\n                  <Button\n                    mt={4}\n                    w=\"full\"\n                    colorScheme=\"cyan\"\n                    isLoading={isSubmitting}\n                    type=\"submit\"\n                    size=\"lg\"\n                    disabled={!canSubmit}\n                    loadingText=\"Logging In\"\n                    variant={'outline'}\n                    _hover={{\n                      bg: 'cyan.600',\n                      color: 'white',\n                      scale: 1.1,\n                    }}\n                  >\n                    Submit\n                  </Button>\n                </Center>\n                <Center mb=\"8px\">\n                  <Text color={textColor}>Or register in with Google</Text>\n                </Center>\n                <Flex justify=\"center\" flexDir={'column'}>\n                  <Box>\n                    <Button\n                      width=\"full\"\n                      onClick={googleSubmit}\n                      disabled={googleLoading}\n                      loadingText=\"Logging In\"\n                      variant=\"outline\"\n                      colorScheme=\"cyan\"\n                      size=\"lg\"\n                      id=\"google-button\"\n                    >\n                      <GoogleIcon boxSize=\"5\" />\n                    </Button>\n                  </Box>\n                  <Box>\n                    <Center my=\"6px\">\n                      <Text mt=\"3px\" mr=\"5px\" color={textColor}>\n                        Already have an account?\n                      </Text>\n                      <Button\n                        as={RouterLink}\n                        variant=\"link\"\n                        colorScheme=\"cyan\"\n                        to={routes.LOGIN}\n                      >\n                        {' '}\n                        Log In\n                      </Button>\n                    </Center>\n                  </Box>\n                </Flex>\n              </Form>\n            </Box>\n          </Box>\n        </m.div>\n      </m.div>\n    </Container>\n  )\n}\n"],"names":["Registration","snap","useStore","navigate","useNavigate","useEffect","routes","register","handleSubmit","watch","setError","clearErrors","setFocus","errors","isDirty","isSubmitting","isValid","touchedFields","useForm","zodResolver","Register","registerUser","isLoading","useRegister","onSubmit","data","error","bg","useColorModeValue","textColor","placeholderColor","password","passwordConfirmation","passwordMatch","value","canSubmit","googleLogin","googleLoading","googleError","useGoogleAuth","googleSubmit","Container","jsxs","m","jsx","Center","Heading","Box","Form","FormControl","Input","FormLabel","FormErrorMessage","Button","Text","Flex","GoogleIcon","RouterLink"],"mappings":"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"}