{"version":3,"file":"ChangeEmailPage-4e4c0fcb.js","sources":["../../src/hooks/useChangeEmail.tsx","../../src/pages/ChangeEmail/ChangeEmailPage.tsx"],"sourcesContent":["import { auth, db } from '@/firebase'\nimport { routes } from '@/layout/routes'\nimport { COLLECTIONS, firebaseErrorMap } from '@/lib/constants'\nimport { storeActions } from '@/stores/store'\nimport { useToast } from '@chakra-ui/react'\nimport {\n  EmailAuthProvider,\n  reauthenticateWithCredential,\n  updateEmail,\n} from 'firebase/auth'\nimport { doc, serverTimestamp, updateDoc } from 'firebase/firestore'\nimport { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\n\nexport function useChangeEmail() {\n  const [isLoading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const toast = useToast()\n  const navigate = useNavigate()\n\n  async function changeEmail({\n    email,\n    password,\n    newEmail,\n  }: {\n    email: string\n    password: string\n    newEmail: string\n  }) {\n    const user = auth.currentUser\n    setLoading(true)\n\n    if (user?.providerData[0]?.providerId === 'google.com') {\n      setError('Please enter your new password')\n      toast({\n        title: 'Password reset failed',\n        description: 'Please enter your new password',\n        status: 'error',\n        isClosable: true,\n        position: 'top',\n        duration: 5000,\n        variant: 'solid',\n      })\n      return\n    }\n    if (!password) {\n      setError('Password must be at least 6 characters')\n      toast({\n        title: 'Password reset failed',\n        description: 'Password must be at least 6 characters',\n        status: 'error',\n        isClosable: true,\n        position: 'top',\n        duration: 5000,\n        variant: 'solid',\n      })\n      return\n    }\n    if (!email) {\n      setError('Email must be at least 6 characters')\n      toast({\n        title: 'Password reset failed',\n        description: 'Email must be at least 6 characters',\n        status: 'error',\n        isClosable: true,\n        position: 'top',\n        duration: 5000,\n        variant: 'solid',\n      })\n      return\n    }\n    if (user && user.email) {\n      const credential = EmailAuthProvider.credential(user.email, password)\n      try {\n        await reauthenticateWithCredential(user, credential)\n        await updateEmail(user, newEmail)\n        toast({\n          title: 'Email updated',\n          description: 'Your email has been updated',\n          status: 'success',\n          isClosable: true,\n          position: 'top',\n          duration: 5000,\n          variant: 'solid',\n          colorScheme: 'cyan',\n        })\n        storeActions.setUserEmail(newEmail)\n        const ref = doc(db, COLLECTIONS.USERS, `${user.uid}`)\n\n        await updateDoc(ref, {\n          email: newEmail,\n          updatedAt: serverTimestamp(),\n        })\n        navigate(routes.DASHBOARD, { replace: true })\n      } catch (error: any) {\n        const errorMessage = firebaseErrorMap.get(`${error.code.toString()}`)\n\n        toast({\n          title: 'Email change failed',\n          description: errorMessage || error.message,\n          status: 'error',\n          isClosable: true,\n          position: 'top',\n          duration: 5000,\n          variant: 'solid',\n        })\n        setError(error)\n      } finally {\n        setLoading(false)\n      }\n    }\n  }\n  return { changeEmail, isLoading, error }\n}\n","import { ChangeEmailSchema, ChangeEmailType } from '@/data/paySchema'\nimport { auth } from '@/firebase'\nimport { useChangeEmail } from '@/hooks/useChangeEmail'\nimport {\n  Box,\n  Button,\n  Center,\n  Container,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Heading,\n  HStack,\n  Input,\n  Text,\n  useColorModeValue,\n} from '@chakra-ui/react'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { motion as m } from 'framer-motion'\nimport { useEffect, useState } from 'react'\nimport { SubmitHandler, useForm } from 'react-hook-form'\nimport { Form, Link as RouterLink } from 'react-router-dom'\n\nimport SlideIn from '@/components/isGoogleSlideIn'\nimport { routes } from '@/layout/routes'\n\nexport default function PasswordReset() {\n  const [isGoogle, setIsGoogle] = useState(false)\n  // const user = useStore()\n  const { changeEmail, error } = useChangeEmail()\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    setError,\n    clearErrors,\n    setFocus,\n    formState: { errors, isDirty, isSubmitting, isValid, touchedFields },\n  } = useForm<ChangeEmailType>({\n    resolver: zodResolver(ChangeEmailSchema),\n  })\n\n  const onSubmit: SubmitHandler<ChangeEmailType> = async (data) => {\n    try {\n      console.log(data)\n      await changeEmail({\n        email: data.email,\n        password: data.password,\n        newEmail: data.newEmail,\n      })\n    } catch (error: any) {\n      console.log(error)\n    }\n  }\n  useEffect(() => {\n    setFocus('password')\n  }, [])\n\n  const bg = useColorModeValue('white', ' gray.800')\n\n  const isAuthenticatedWithGoogle = () => {\n    const user = auth?.currentUser\n    if (user !== null) {\n      if (user?.providerData[0]?.providerId === 'google.com') {\n        return true\n      }\n    }\n    return false\n  }\n\n  const canSubmit = isDirty && isValid && !isSubmitting && !isGoogle\n\n  useEffect(() => {\n    setIsGoogle(isAuthenticatedWithGoogle())\n  }, [])\n\n  return (\n    <Container maxW={{ base: '100%', sm: '95%' }} mt={8}>\n      <Center>\n        <Heading\n          mt=\"10\"\n          as={m.h1}\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          bgGradient=\"linear(to-b, #42047e, #07f49e)\"\n          bgClip=\"text\"\n          fontSize={['3xl', '3xl', '4xl']}\n          fontWeight=\"extrabold\"\n        >\n          Update Email\n        </Heading>\n      </Center>\n      <m.div\n        initial={{ opacity: 0, y: 80, scale: 0.8 }}\n        animate={{ opacity: 1, y: 0, scale: [0.9, 1.2, 1] }}\n        transition={{\n          type: 'spring',\n          stiffness: 90,\n\n          damping: 15,\n        }}\n        exit={{ opacity: 0 }}\n      >\n        <Box\n          bg={bg}\n          border=\"2px\"\n          borderColor=\"gray.700\"\n          boxShadow=\"dark-lg\"\n          p=\"5\"\n          rounded=\"md\"\n          mt={10}\n          mb={10}\n          w=\"50vw\"\n          maxW=\"500px\"\n          minW=\"350px\"\n          mx=\"auto\"\n        >\n          <Box p=\"3\">\n            <Form onSubmit={handleSubmit(onSubmit)}>\n              <Box my={2}>\n                <FormControl\n                  isInvalid={errors.password ? true : false}\n                  isRequired\n                  variant=\"floating\"\n                >\n                  <Input\n                    {...register('email')}\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"Email\"\n                    autoComplete=\"email\"\n                    mb=\"4\"\n                  />\n                  <FormLabel htmlFor=\"email\">Current Email</FormLabel>\n                  <FormErrorMessage>\n                    {errors.email && errors.email.message}\n                  </FormErrorMessage>\n                </FormControl>\n              </Box>\n              <Box my={2}>\n                <FormControl\n                  isInvalid={errors.password ? true : false}\n                  isRequired\n                  variant=\"floating\"\n                >\n                  <Input\n                    {...register('password')}\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder=\"Password \"\n                    autoComplete=\"new-password\"\n                    mb=\"4\"\n                  />\n                  <FormLabel htmlFor=\"password\">Password</FormLabel>\n                  <FormErrorMessage>\n                    {errors.password && errors.password.message}\n                  </FormErrorMessage>\n                </FormControl>\n              </Box>\n              <Box my={2}>\n                <FormControl\n                  isInvalid={errors.newEmail ? true : false}\n                  isRequired\n                  variant=\"floating\"\n                >\n                  <Input\n                    {...register('newEmail')}\n                    id=\"newEmail\"\n                    type=\"email\"\n                    placeholder=\"New Email\"\n                    autoComplete=\"email\"\n                    // mb=\"1\"\n                  />\n                  <FormLabel htmlFor=\"newEmail\">New Email</FormLabel>\n                  <FormErrorMessage>\n                    {errors.newEmail && errors.newEmail.message}\n                  </FormErrorMessage>\n                </FormControl>\n              </Box>\n\n              <Center my={2}>\n                <Button\n                  my={4}\n                  w=\"full\"\n                  colorScheme=\"cyan\"\n                  isLoading={isSubmitting}\n                  type=\"submit\"\n                  size=\"lg\"\n                  disabled={!canSubmit}\n                  variant=\"outline\"\n                >\n                  Submit\n                </Button>\n              </Center>\n              <HStack spacing=\"1\" justify=\"center\">\n                <Text color=\"muted\">Go back to</Text>\n                <Button\n                  as={RouterLink}\n                  to={routes.DASHBOARD}\n                  variant=\"link\"\n                  colorScheme=\"cyan\"\n                >\n                  Dashboard\n                </Button>\n              </HStack>\n            </Form>\n          </Box>\n        </Box>\n      </m.div>\n      <SlideIn isGoogle={isGoogle} />\n    </Container>\n  )\n}\n"],"names":["useChangeEmail","isLoading","setLoading","useState","error","setError","toast","useToast","navigate","useNavigate","changeEmail","email","password","newEmail","user","auth","_a","credential","EmailAuthProvider","reauthenticateWithCredential","updateEmail","storeActions","ref","doc","db","COLLECTIONS","updateDoc","serverTimestamp","routes","errorMessage","firebaseErrorMap","PasswordReset","isGoogle","setIsGoogle","register","handleSubmit","watch","clearErrors","setFocus","errors","isDirty","isSubmitting","isValid","touchedFields","useForm","zodResolver","ChangeEmailSchema","onSubmit","data","useEffect","bg","useColorModeValue","isAuthenticatedWithGoogle","_b","canSubmit","jsxs","Container","jsx","Center","Heading","m","Box","Form","FormControl","Input","FormLabel","FormErrorMessage","Button","HStack","Text","RouterLink","SlideIn"],"mappings":"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"}