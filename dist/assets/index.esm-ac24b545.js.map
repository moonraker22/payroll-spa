{"version":3,"file":"index.esm-ac24b545.js","sources":["../../node_modules/@chakra-ui/hooks/dist/index.esm.js"],"sourcesContent":["// src/use-animation-state.ts\nimport { getOwnerWindow } from \"@chakra-ui/utils\";\nimport { useEffect as useEffect3, useState } from \"react\";\n\n// src/use-event-listener.ts\nimport { runIfFn } from \"@chakra-ui/utils\";\nimport { useEffect as useEffect2 } from \"react\";\n\n// src/use-callback-ref.ts\nimport { useCallback, useRef } from \"react\";\n\n// src/use-safe-layout-effect.ts\nimport { isBrowser } from \"@chakra-ui/utils\";\nimport { useEffect, useLayoutEffect } from \"react\";\nvar useSafeLayoutEffect = isBrowser ? useLayoutEffect : useEffect;\n\n// src/use-callback-ref.ts\nfunction useCallbackRef(fn, deps = []) {\n  const ref = useRef(fn);\n  useSafeLayoutEffect(() => {\n    ref.current = fn;\n  });\n  return useCallback((...args) => {\n    var _a;\n    return (_a = ref.current) == null ? void 0 : _a.call(ref, ...args);\n  }, deps);\n}\n\n// src/use-event-listener.ts\nfunction useEventListener(event, handler, env, options) {\n  const listener = useCallbackRef(handler);\n  useEffect2(() => {\n    const node = runIfFn(env) ?? document;\n    if (!handler) {\n      return;\n    }\n    node.addEventListener(event, listener, options);\n    return () => {\n      node.removeEventListener(event, listener, options);\n    };\n  }, [event, env, options, listener, handler]);\n  return () => {\n    const node = runIfFn(env) ?? document;\n    node.removeEventListener(event, listener, options);\n  };\n}\n\n// src/use-animation-state.ts\nfunction useAnimationState(props) {\n  const { isOpen, ref } = props;\n  const [mounted, setMounted] = useState(isOpen);\n  const [once, setOnce] = useState(false);\n  useEffect3(() => {\n    if (!once) {\n      setMounted(isOpen);\n      setOnce(true);\n    }\n  }, [isOpen, once, mounted]);\n  useEventListener(\"animationend\", () => {\n    setMounted(isOpen);\n  }, () => ref.current);\n  const hidden = isOpen ? false : !mounted;\n  return {\n    present: !hidden,\n    onComplete() {\n      var _a;\n      const win = getOwnerWindow(ref.current);\n      const evt = new win.CustomEvent(\"animationend\", { bubbles: true });\n      (_a = ref.current) == null ? void 0 : _a.dispatchEvent(evt);\n    }\n  };\n}\n\n// src/use-boolean.ts\nimport { useMemo, useState as useState2 } from \"react\";\nfunction useBoolean(initialState = false) {\n  const [value, setValue] = useState2(initialState);\n  const callbacks = useMemo(() => ({\n    on: () => setValue(true),\n    off: () => setValue(false),\n    toggle: () => setValue((prev) => !prev)\n  }), []);\n  return [value, callbacks];\n}\n\n// src/use-clipboard.ts\nimport { useState as useState3, useCallback as useCallback2, useEffect as useEffect4 } from \"react\";\nimport copy from \"copy-to-clipboard\";\nfunction useClipboard(initialValue, optionsOrTimeout = {}) {\n  const [hasCopied, setHasCopied] = useState3(false);\n  const [value, setValue] = useState3(initialValue);\n  const { timeout = 1500, ...copyOptions } = typeof optionsOrTimeout === \"number\" ? { timeout: optionsOrTimeout } : optionsOrTimeout;\n  const onCopy = useCallback2(() => {\n    const didCopy = copy(value, copyOptions);\n    setHasCopied(didCopy);\n  }, [value, copyOptions]);\n  useEffect4(() => {\n    let timeoutId = null;\n    if (hasCopied) {\n      timeoutId = window.setTimeout(() => {\n        setHasCopied(false);\n      }, timeout);\n    }\n    return () => {\n      if (timeoutId) {\n        window.clearTimeout(timeoutId);\n      }\n    };\n  }, [timeout, hasCopied]);\n  return { value, setValue, onCopy, hasCopied };\n}\n\n// src/use-const.ts\nimport { useRef as useRef2 } from \"react\";\nfunction useConst(init) {\n  const ref = useRef2(null);\n  if (ref.current === null) {\n    ref.current = typeof init === \"function\" ? init() : init;\n  }\n  return ref.current;\n}\n\n// src/use-controllable.ts\nimport { runIfFn as runIfFn2 } from \"@chakra-ui/utils\";\nimport { useCallback as useCallback3, useState as useState4 } from \"react\";\nfunction useControllableProp(prop, state) {\n  const isControlled = prop !== void 0;\n  const value = isControlled && typeof prop !== \"undefined\" ? prop : state;\n  return [isControlled, value];\n}\nfunction useControllableState(props) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    shouldUpdate = (prev, next) => prev !== next\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const shouldUpdateProp = useCallbackRef(shouldUpdate);\n  const [valueState, setValue] = useState4(defaultValue);\n  const isControlled = valueProp !== void 0;\n  const value = isControlled ? valueProp : valueState;\n  const updateValue = useCallback3((next) => {\n    const nextValue = runIfFn2(next, value);\n    if (!shouldUpdateProp(value, nextValue)) {\n      return;\n    }\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n    onChangeProp(nextValue);\n  }, [isControlled, onChangeProp, value, shouldUpdateProp]);\n  return [value, updateValue];\n}\n\n// src/use-dimensions.ts\nimport { getBox } from \"@chakra-ui/utils\";\nimport { useRef as useRef3, useState as useState5 } from \"react\";\nfunction useDimensions(ref, observe) {\n  const [dimensions, setDimensions] = useState5(null);\n  const rafId = useRef3();\n  useSafeLayoutEffect(() => {\n    if (!ref.current)\n      return void 0;\n    const node = ref.current;\n    function measure() {\n      rafId.current = requestAnimationFrame(() => {\n        const boxModel = getBox(node);\n        setDimensions(boxModel);\n      });\n    }\n    measure();\n    if (observe) {\n      window.addEventListener(\"resize\", measure);\n      window.addEventListener(\"scroll\", measure);\n    }\n    return () => {\n      if (observe) {\n        window.removeEventListener(\"resize\", measure);\n        window.removeEventListener(\"scroll\", measure);\n      }\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current);\n      }\n    };\n  }, [observe]);\n  return dimensions;\n}\n\n// src/use-disclosure.ts\nimport { callAllHandlers } from \"@chakra-ui/utils\";\n\n// src/use-id.ts\nimport { useCallback as useCallback4, useId as useReactId, useMemo as useMemo2, useState as useState6 } from \"react\";\nfunction useId(idProp, prefix) {\n  const id = useReactId();\n  return useMemo2(() => idProp || [prefix, id].filter(Boolean).join(\"-\"), [idProp, prefix, id]);\n}\nfunction useIds(idProp, ...prefixes) {\n  const id = useId(idProp);\n  return useMemo2(() => {\n    return prefixes.map((prefix) => `${prefix}-${id}`);\n  }, [id, prefixes]);\n}\nfunction useOptionalPart(partId) {\n  const [id, setId] = useState6(null);\n  const ref = useCallback4((node) => {\n    setId(node ? partId : null);\n  }, [partId]);\n  return { ref, id, isRendered: Boolean(id) };\n}\n\n// src/use-disclosure.ts\nimport { useCallback as useCallback5, useState as useState7 } from \"react\";\nfunction useDisclosure(props = {}) {\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp\n  } = props;\n  const onOpenPropCallbackRef = useCallbackRef(onOpenProp);\n  const onClosePropCallbackRef = useCallbackRef(onCloseProp);\n  const [isOpenState, setIsOpen] = useState7(props.defaultIsOpen || false);\n  const [isControlled, isOpen] = useControllableProp(isOpenProp, isOpenState);\n  const id = useId(idProp, \"disclosure\");\n  const onClose = useCallback5(() => {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n    onClosePropCallbackRef == null ? void 0 : onClosePropCallbackRef();\n  }, [isControlled, onClosePropCallbackRef]);\n  const onOpen = useCallback5(() => {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n    onOpenPropCallbackRef == null ? void 0 : onOpenPropCallbackRef();\n  }, [isControlled, onOpenPropCallbackRef]);\n  const onToggle = useCallback5(() => {\n    const action = isOpen ? onClose : onOpen;\n    action();\n  }, [isOpen, onOpen, onClose]);\n  return {\n    isOpen: !!isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps: (props2 = {}) => ({\n      ...props2,\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": id,\n      onClick: callAllHandlers(props2.onClick, onToggle)\n    }),\n    getDisclosureProps: (props2 = {}) => ({\n      ...props2,\n      hidden: !isOpen,\n      id\n    })\n  };\n}\n\n// src/use-event-listener-map.ts\nimport {\n  getPointerEventName,\n  wrapPointerEventHandler\n} from \"@chakra-ui/utils\";\nimport { useCallback as useCallback6, useEffect as useEffect5, useRef as useRef4 } from \"react\";\nfunction useEventListenerMap() {\n  const listeners = useRef4(/* @__PURE__ */ new Map());\n  const currentListeners = listeners.current;\n  const add = useCallback6((el, type, listener, options) => {\n    const pointerEventListener = wrapPointerEventHandler(listener, type === \"pointerdown\");\n    listeners.current.set(listener, {\n      __listener: pointerEventListener,\n      type: getPointerEventName(type),\n      el,\n      options\n    });\n    el.addEventListener(type, pointerEventListener, options);\n  }, []);\n  const remove = useCallback6((el, type, listener, options) => {\n    const { __listener: pointerEventListener } = listeners.current.get(listener);\n    el.removeEventListener(type, pointerEventListener, options);\n    listeners.current.delete(pointerEventListener);\n  }, []);\n  useEffect5(() => () => {\n    currentListeners.forEach((value, key) => {\n      remove(value.el, value.type, key, value.options);\n    });\n  }, [remove, currentListeners]);\n  return { add, remove };\n}\n\n// src/use-focus-effect.ts\nimport { hasFocusWithin, focus } from \"@chakra-ui/utils\";\n\n// src/use-update-effect.ts\nimport { useEffect as useEffect6, useRef as useRef5 } from \"react\";\nvar useUpdateEffect = (effect, deps) => {\n  const renderCycleRef = useRef5(false);\n  const effectCycleRef = useRef5(false);\n  useEffect6(() => {\n    const isMounted = renderCycleRef.current;\n    const shouldRun = isMounted && effectCycleRef.current;\n    if (shouldRun) {\n      return effect();\n    }\n    effectCycleRef.current = true;\n  }, deps);\n  useEffect6(() => {\n    renderCycleRef.current = true;\n    return () => {\n      renderCycleRef.current = false;\n    };\n  }, []);\n};\n\n// src/use-focus-effect.ts\nfunction useFocusEffect(ref, options) {\n  const { shouldFocus, preventScroll } = options;\n  useUpdateEffect(() => {\n    const node = ref.current;\n    if (!node || !shouldFocus)\n      return;\n    if (!hasFocusWithin(node)) {\n      focus(node, { preventScroll, nextTick: true });\n    }\n  }, [shouldFocus, ref, preventScroll]);\n}\n\n// src/use-focus-on-hide.ts\nimport {\n  contains,\n  focus as focus2,\n  getActiveElement,\n  isTabbable\n} from \"@chakra-ui/utils\";\nfunction preventReturnFocus(containerRef) {\n  const el = containerRef.current;\n  if (!el)\n    return false;\n  const activeElement = getActiveElement(el);\n  if (!activeElement)\n    return false;\n  if (contains(el, activeElement))\n    return false;\n  if (isTabbable(activeElement))\n    return true;\n  return false;\n}\nfunction useFocusOnHide(containerRef, options) {\n  const { shouldFocus: shouldFocusProp, visible, focusRef } = options;\n  const shouldFocus = shouldFocusProp && !visible;\n  useUpdateEffect(() => {\n    if (!shouldFocus)\n      return;\n    if (preventReturnFocus(containerRef)) {\n      return;\n    }\n    const el = (focusRef == null ? void 0 : focusRef.current) || containerRef.current;\n    if (el) {\n      focus2(el, { nextTick: true });\n    }\n  }, [shouldFocus, containerRef, focusRef]);\n}\n\n// src/use-focus-on-pointerdown.ts\nimport {\n  contains as contains2,\n  detectBrowser,\n  focus as focus3,\n  getOwnerDocument,\n  isActiveElement,\n  isRefObject\n} from \"@chakra-ui/utils\";\n\n// src/use-pointer-event.ts\nimport {\n  getPointerEventName as getPointerEventName2,\n  wrapPointerEventHandler as wrapPointerEventHandler2\n} from \"@chakra-ui/utils\";\nfunction usePointerEvent(env, eventName, handler, options) {\n  return useEventListener(getPointerEventName2(eventName), wrapPointerEventHandler2(handler, eventName === \"pointerdown\"), env, options);\n}\n\n// src/use-focus-on-pointerdown.ts\nfunction useFocusOnPointerDown(props) {\n  const { ref, elements, enabled } = props;\n  const isSafari = detectBrowser(\"Safari\");\n  const doc = () => getOwnerDocument(ref.current);\n  usePointerEvent(doc, \"pointerdown\", (event) => {\n    if (!isSafari || !enabled)\n      return;\n    const target = event.target;\n    const els = elements ?? [ref];\n    const isValidTarget = els.some((elementOrRef) => {\n      const el = isRefObject(elementOrRef) ? elementOrRef.current : elementOrRef;\n      return contains2(el, target);\n    });\n    if (!isActiveElement(target) && isValidTarget) {\n      event.preventDefault();\n      focus3(target);\n    }\n  });\n}\n\n// src/use-focus-on-show.ts\nimport {\n  contains as contains3,\n  focus as focus4,\n  getAllFocusable,\n  isRefObject as isRefObject2\n} from \"@chakra-ui/utils\";\nimport { useCallback as useCallback7, useRef as useRef6 } from \"react\";\nvar defaultOptions = {\n  preventScroll: true,\n  shouldFocus: false\n};\nfunction useFocusOnShow(target, options = defaultOptions) {\n  const { focusRef, preventScroll, shouldFocus, visible } = options;\n  const element = isRefObject2(target) ? target.current : target;\n  const autoFocusValue = shouldFocus && visible;\n  const autoFocusRef = useRef6(autoFocusValue);\n  const lastVisibleRef = useRef6(visible);\n  useSafeLayoutEffect(() => {\n    if (!lastVisibleRef.current && visible) {\n      autoFocusRef.current = autoFocusValue;\n    }\n    lastVisibleRef.current = visible;\n  }, [visible, autoFocusValue]);\n  const onFocus = useCallback7(() => {\n    if (!visible || !element || !autoFocusRef.current)\n      return;\n    autoFocusRef.current = false;\n    if (contains3(element, document.activeElement))\n      return;\n    if (focusRef == null ? void 0 : focusRef.current) {\n      focus4(focusRef.current, { preventScroll, nextTick: true });\n    } else {\n      const tabbableEls = getAllFocusable(element);\n      if (tabbableEls.length > 0) {\n        focus4(tabbableEls[0], { preventScroll, nextTick: true });\n      }\n    }\n  }, [visible, preventScroll, element, focusRef]);\n  useUpdateEffect(() => {\n    onFocus();\n  }, [onFocus]);\n  useEventListener(\"transitionend\", onFocus, element);\n}\n\n// src/use-force-update.ts\nimport { useCallback as useCallback8, useRef as useRef7, useState as useState8 } from \"react\";\n\n// src/use-unmount-effect.ts\nimport { useEffect as useEffect7 } from \"react\";\nfunction useUnmountEffect(fn, deps = []) {\n  return useEffect7(() => () => fn(), deps);\n}\n\n// src/use-force-update.ts\nfunction useForceUpdate() {\n  const unloadingRef = useRef7(false);\n  const [count, setCount] = useState8(0);\n  useUnmountEffect(() => {\n    unloadingRef.current = true;\n  });\n  return useCallback8(() => {\n    if (!unloadingRef.current) {\n      setCount(count + 1);\n    }\n  }, [count]);\n}\n\n// src/use-interval.ts\nimport { useEffect as useEffect8 } from \"react\";\nfunction useInterval(callback, delay) {\n  const fn = useCallbackRef(callback);\n  useEffect8(() => {\n    let intervalId = null;\n    const tick = () => fn();\n    if (delay !== null) {\n      intervalId = window.setInterval(tick, delay);\n    }\n    return () => {\n      if (intervalId) {\n        window.clearInterval(intervalId);\n      }\n    };\n  }, [delay, fn]);\n}\n\n// src/use-latest-ref.ts\nimport { useRef as useRef8 } from \"react\";\nfunction useLatestRef(value) {\n  const ref = useRef8(null);\n  ref.current = value;\n  return ref;\n}\n\n// src/use-merge-refs.ts\nimport { useMemo as useMemo3 } from \"react\";\nfunction assignRef(ref, value) {\n  if (ref == null)\n    return;\n  if (typeof ref === \"function\") {\n    ref(value);\n    return;\n  }\n  try {\n    ref.current = value;\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);\n  }\n}\nfunction useMergeRefs(...refs) {\n  return useMemo3(() => {\n    if (refs.every((ref) => ref == null)) {\n      return null;\n    }\n    return (node) => {\n      refs.forEach((ref) => {\n        if (ref)\n          assignRef(ref, node);\n      });\n    };\n  }, refs);\n}\n\n// src/use-mouse-down-ref.ts\nimport { useRef as useRef9 } from \"react\";\nfunction useMouseDownRef(shouldListen = true) {\n  const mouseDownRef = useRef9();\n  useEventListener(\"mousedown\", (event) => {\n    if (shouldListen) {\n      mouseDownRef.current = event.target;\n    }\n  });\n  return mouseDownRef;\n}\n\n// src/use-outside-click.ts\nimport { getOwnerDocument as getOwnerDocument2 } from \"@chakra-ui/utils\";\nimport { useEffect as useEffect9, useRef as useRef10 } from \"react\";\nfunction useOutsideClick(props) {\n  const { ref, handler, enabled = true } = props;\n  const savedHandler = useCallbackRef(handler);\n  const stateRef = useRef10({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false\n  });\n  const state = stateRef.current;\n  useEffect9(() => {\n    if (!enabled)\n      return;\n    const onPointerDown = (e) => {\n      if (isValidEvent(e, ref)) {\n        state.isPointerDown = true;\n      }\n    };\n    const onMouseUp = (event) => {\n      if (state.ignoreEmulatedMouseEvents) {\n        state.ignoreEmulatedMouseEvents = false;\n        return;\n      }\n      if (state.isPointerDown && handler && isValidEvent(event, ref)) {\n        state.isPointerDown = false;\n        savedHandler(event);\n      }\n    };\n    const onTouchEnd = (event) => {\n      state.ignoreEmulatedMouseEvents = true;\n      if (handler && state.isPointerDown && isValidEvent(event, ref)) {\n        state.isPointerDown = false;\n        savedHandler(event);\n      }\n    };\n    const doc = getOwnerDocument2(ref.current);\n    doc.addEventListener(\"mousedown\", onPointerDown, true);\n    doc.addEventListener(\"mouseup\", onMouseUp, true);\n    doc.addEventListener(\"touchstart\", onPointerDown, true);\n    doc.addEventListener(\"touchend\", onTouchEnd, true);\n    return () => {\n      doc.removeEventListener(\"mousedown\", onPointerDown, true);\n      doc.removeEventListener(\"mouseup\", onMouseUp, true);\n      doc.removeEventListener(\"touchstart\", onPointerDown, true);\n      doc.removeEventListener(\"touchend\", onTouchEnd, true);\n    };\n  }, [handler, ref, savedHandler, state, enabled]);\n}\nfunction isValidEvent(event, ref) {\n  var _a;\n  const target = event.target;\n  if (event.button > 0)\n    return false;\n  if (target) {\n    const doc = getOwnerDocument2(target);\n    if (!doc.contains(target))\n      return false;\n  }\n  return !((_a = ref.current) == null ? void 0 : _a.contains(target));\n}\n\n// src/use-pan-gesture.ts\nimport {\n  noop,\n  PanSession\n} from \"@chakra-ui/utils\";\nimport { useEffect as useEffect10, useRef as useRef11 } from \"react\";\nfunction usePanGesture(ref, props) {\n  const {\n    onPan,\n    onPanStart,\n    onPanEnd,\n    onPanSessionStart,\n    onPanSessionEnd,\n    threshold\n  } = props;\n  const hasPanEvents = Boolean(onPan || onPanStart || onPanEnd || onPanSessionStart || onPanSessionEnd);\n  const panSession = useRef11(null);\n  const handlers = {\n    onSessionStart: onPanSessionStart,\n    onSessionEnd: onPanSessionEnd,\n    onStart: onPanStart,\n    onMove: onPan,\n    onEnd(event, info) {\n      panSession.current = null;\n      onPanEnd == null ? void 0 : onPanEnd(event, info);\n    }\n  };\n  useEffect10(() => {\n    var _a;\n    (_a = panSession.current) == null ? void 0 : _a.updateHandlers(handlers);\n  });\n  function onPointerDown(event) {\n    panSession.current = new PanSession(event, handlers, threshold);\n  }\n  usePointerEvent(() => ref.current, \"pointerdown\", hasPanEvents ? onPointerDown : noop);\n  useUnmountEffect(() => {\n    var _a;\n    (_a = panSession.current) == null ? void 0 : _a.end();\n    panSession.current = null;\n  });\n}\n\n// src/use-previous.ts\nimport { useRef as useRef12, useEffect as useEffect11 } from \"react\";\nfunction usePrevious(value) {\n  const ref = useRef12();\n  useEffect11(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n\n// src/use-shortcut.ts\nimport { useEffect as useEffect12, useRef as useRef13, useState as useState9 } from \"react\";\nfunction isPrintableCharacter(event) {\n  const { key } = event;\n  return key.length === 1 || key.length > 1 && /[^a-zA-Z0-9]/.test(key);\n}\nfunction useShortcut(props = {}) {\n  const { timeout = 300, preventDefault = () => true } = props;\n  const [keys, setKeys] = useState9([]);\n  const timeoutRef = useRef13();\n  const flush = () => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n  };\n  const clearKeysAfterDelay = () => {\n    flush();\n    timeoutRef.current = setTimeout(() => {\n      setKeys([]);\n      timeoutRef.current = null;\n    }, timeout);\n  };\n  useEffect12(() => flush, []);\n  function onKeyDown(fn) {\n    return (event) => {\n      if (event.key === \"Backspace\") {\n        const keysCopy = [...keys];\n        keysCopy.pop();\n        setKeys(keysCopy);\n        return;\n      }\n      if (isPrintableCharacter(event)) {\n        const keysCopy = keys.concat(event.key);\n        if (preventDefault(event)) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n        setKeys(keysCopy);\n        fn(keysCopy.join(\"\"));\n        clearKeysAfterDelay();\n      }\n    };\n  }\n  return onKeyDown;\n}\n\n// src/use-timeout.ts\nimport { useEffect as useEffect13 } from \"react\";\nfunction useTimeout(callback, delay) {\n  const fn = useCallbackRef(callback);\n  useEffect13(() => {\n    if (delay == null)\n      return void 0;\n    let timeoutId = null;\n    timeoutId = window.setTimeout(() => {\n      fn();\n    }, delay);\n    return () => {\n      if (timeoutId) {\n        window.clearTimeout(timeoutId);\n      }\n    };\n  }, [delay, fn]);\n}\n\n// src/use-why-update.ts\nimport { useEffect as useEffect14, useRef as useRef14 } from \"react\";\nfunction useWhyDidYouUpdate(name, props) {\n  const previousProps = useRef14();\n  useEffect14(() => {\n    if (previousProps.current) {\n      const allKeys = Object.keys({ ...previousProps.current, ...props });\n      const changesObj = {};\n      allKeys.forEach((key) => {\n        if (previousProps.current[key] !== props[key]) {\n          changesObj[key] = {\n            from: previousProps.current[key],\n            to: props[key]\n          };\n        }\n      });\n      if (Object.keys(changesObj).length) {\n        console.log(\"[why-did-you-update]\", name, changesObj);\n      }\n    }\n    previousProps.current = props;\n  });\n}\nexport {\n  assignRef,\n  useAnimationState,\n  useBoolean,\n  useCallbackRef,\n  useClipboard,\n  useConst,\n  useControllableProp,\n  useControllableState,\n  useDimensions,\n  useDisclosure,\n  useEventListener,\n  useEventListenerMap,\n  useFocusEffect,\n  useFocusOnHide,\n  useFocusOnPointerDown,\n  useFocusOnShow,\n  useForceUpdate,\n  useId,\n  useIds,\n  useInterval,\n  useLatestRef,\n  useMergeRefs,\n  useMouseDownRef,\n  useOptionalPart,\n  useOutsideClick,\n  usePanGesture,\n  usePointerEvent,\n  usePrevious,\n  useSafeLayoutEffect,\n  useShortcut,\n  useTimeout,\n  useUnmountEffect,\n  useUpdateEffect,\n  useWhyDidYouUpdate\n};\n"],"names":["useSafeLayoutEffect","isBrowser","useLayoutEffect","useEffect","useCallbackRef","fn","deps","ref","useRef","useCallback","args","_a","useConst","init","useRef2","useControllableProp","prop","state","isControlled","useId","idProp","prefix","id","useReactId","useMemo2","useDisclosure","props","onCloseProp","onOpenProp","isOpenProp","onOpenPropCallbackRef","onClosePropCallbackRef","isOpenState","setIsOpen","useState7","isOpen","onClose","useCallback5","onOpen","onToggle","props2","callAllHandlers"],"mappings":"0DAcA,IAAIA,EAAsBC,EAAYC,EAAe,QAAA,gBAAGC,oBAGxD,SAASC,EAAeC,EAAIC,EAAO,GAAI,CACrC,MAAMC,EAAMC,iBAAOH,CAAE,EACrB,OAAAL,EAAoB,IAAM,CACxBO,EAAI,QAAUF,CAClB,CAAG,EACMI,EAAW,QAAA,YAAC,IAAIC,IAAS,CAC9B,IAAIC,EACJ,OAAQA,EAAKJ,EAAI,UAAY,KAAO,OAASI,EAAG,KAAKJ,EAAK,GAAGG,CAAI,CAClE,EAAEJ,CAAI,CACT,CAwFA,SAASM,EAASC,EAAM,CACtB,MAAMN,EAAMO,iBAAQ,IAAI,EACxB,OAAIP,EAAI,UAAY,OAClBA,EAAI,QAAU,OAAOM,GAAS,WAAaA,EAAM,EAAGA,GAE/CN,EAAI,OACb,CAKA,SAASQ,EAAoBC,EAAMC,EAAO,CACxC,MAAMC,EAAeF,IAAS,OAE9B,MAAO,CAACE,EADMA,GAAgB,OAAOF,EAAS,IAAcA,EAAOC,CACxC,CAC7B,CAiEA,SAASE,EAAMC,EAAQC,EAAQ,CAC7B,MAAMC,EAAKC,EAAAA,QAAAA,QACX,OAAOC,EAAAA,QAAAA,QAAS,IAAMJ,GAAU,CAACC,EAAQC,CAAE,EAAE,OAAO,OAAO,EAAE,KAAK,GAAG,EAAG,CAACF,EAAQC,EAAQC,CAAE,CAAC,CAC9F,CAiBA,SAASG,EAAcC,EAAQ,GAAI,CACjC,KAAM,CACJ,QAASC,EACT,OAAQC,EACR,OAAQC,EACR,GAAIT,CACL,EAAGM,EACEI,EAAwB1B,EAAewB,CAAU,EACjDG,EAAyB3B,EAAeuB,CAAW,EACnD,CAACK,EAAaC,CAAS,EAAIC,EAAS,QAAA,SAACR,EAAM,eAAiB,EAAK,EACjE,CAACR,EAAciB,CAAM,EAAIpB,EAAoBc,EAAYG,CAAW,EACpEV,EAAKH,EAAMC,EAAQ,YAAY,EAC/BgB,EAAUC,EAAAA,QAAAA,YAAa,IAAM,CAC5BnB,GACHe,EAAU,EAAK,EAEjBF,GAA0B,MAAgBA,EAAsB,CACpE,EAAK,CAACb,EAAca,CAAsB,CAAC,EACnCO,EAASD,EAAAA,QAAAA,YAAa,IAAM,CAC3BnB,GACHe,EAAU,EAAI,EAEhBH,GAAyB,MAAgBA,EAAqB,CAClE,EAAK,CAACZ,EAAcY,CAAqB,CAAC,EAClCS,EAAWF,EAAAA,QAAAA,YAAa,IAAM,EACnBF,EAASC,EAAUE,IAEnC,EAAE,CAACH,EAAQG,EAAQF,CAAO,CAAC,EAC5B,MAAO,CACL,OAAQ,CAAC,CAACD,EACV,OAAAG,EACA,QAAAF,EACA,SAAAG,EACA,aAAArB,EACA,eAAgB,CAACsB,EAAS,MAAQ,CAChC,GAAGA,EACH,gBAAiBL,EACjB,gBAAiBb,EACjB,QAASmB,EAAgBD,EAAO,QAASD,CAAQ,CACvD,GACI,mBAAoB,CAACC,EAAS,MAAQ,CACpC,GAAGA,EACH,OAAQ,CAACL,EACT,GAAAb,CACN,EACA,CACA"}