<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="visual" viewBox="0 0 900 600" width="900" height="600" version="1.1"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><rect width="900" height="600" fill="#FFFFFF"/><g><g transform="translate(613 121)"><path d="M0 -57.1L44.6 -35.6L55.7 12.7L24.8 51.4L-24.8 51.4L-55.7 12.7L-44.6 -35.6Z" stroke="#00A3C4" fill="none" stroke-width="2"/></g><g transform="translate(127 134)"><path d="M0 -29L22.7 -18.1L28.3 6.5L12.6 26.1L-12.6 26.1L-28.3 6.5L-22.7 -18.1Z" stroke="#00A3C4" fill="none" stroke-width="2"/></g><g transform="translate(746 493)"><path d="M0 -43L33.6 -26.8L41.9 9.6L18.7 38.7L-18.7 38.7L-41.9 9.6L-33.6 -26.8Z" stroke="#00A3C4" fill="none" stroke-width="2"/></g><g transform="translate(253 379)"><path d="M0 -42L32.8 -26.2L40.9 9.3L18.2 37.8L-18.2 37.8L-40.9 9.3L-32.8 -26.2Z" stroke="#00A3C4" fill="none" stroke-width="2"/></g><g transform="translate(177 535)"><path d="M0 -36L28.1 -22.4L35.1 8L15.6 32.4L-15.6 32.4L-35.1 8L-28.1 -22.4Z" stroke="#00A3C4" fill="none" stroke-width="2"/></g><g transform="translate(545 492)"><path d="M0 -33L25.8 -20.6L32.2 7.3L14.3 29.7L-14.3 29.7L-32.2 7.3L-25.8 -20.6Z" stroke="#00A3C4" fill="none" stroke-width="2"/></g><g transform="translate(741 240)"><path d="M0 -39L30.5 -24.3L38 8.7L16.9 35.1L-16.9 35.1L-38 8.7L-30.5 -24.3Z" stroke="#00A3C4" fill="none" stroke-width="2"/></g><g transform="translate(229 213)"><path d="M0 -31L24.2 -19.3L30.2 6.9L13.5 27.9L-13.5 27.9L-30.2 6.9L-24.2 -19.3Z" stroke="#00A3C4" fill="none" stroke-width="2"/></g><g transform="translate(394 157)"><path d="M0 -38L29.7 -23.7L37 8.5L16.5 34.2L-16.5 34.2L-37 8.5L-29.7 -23.7Z" stroke="#00A3C4" fill="none" stroke-width="2"/></g><g transform="translate(74 299)"><path d="M0 -29L22.7 -18.1L28.3 6.5L12.6 26.1L-12.6 26.1L-28.3 6.5L-22.7 -18.1Z" stroke="#00A3C4" fill="none" stroke-width="2"/></g><g transform="translate(561 232)"><path d="M0 -28L21.9 -17.5L27.3 6.2L12.1 25.2L-12.1 25.2L-27.3 6.2L-21.9 -17.5Z" stroke="#00A3C4" fill="none" stroke-width="2"/></g><g transform="translate(723 354)"><path d="M0 -38L29.7 -23.7L37 8.5L16.5 34.2L-16.5 34.2L-37 8.5L-29.7 -23.7Z" stroke="#00A3C4" fill="none" stroke-width="2"/></g><g transform="translate(414 270)"><path d="M0 -32L25 -20L31.2 7.1L13.9 28.8L-13.9 28.8L-31.2 7.1L-25 -20Z" stroke="#00A3C4" fill="none" stroke-width="2"/></g><g transform="translate(813 119)"><path d="M0 -21L16.4 -13.1L20.5 4.7L9.1 18.9L-9.1 18.9L-20.5 4.7L-16.4 -13.1Z" stroke="#00A3C4" fill="none" stroke-width="2"/></g><g transform="translate(113 419)"><path d="M0 -21L16.4 -13.1L20.5 4.7L9.1 18.9L-9.1 18.9L-20.5 4.7L-16.4 -13.1Z" stroke="#00A3C4" fill="none" stroke-width="2"/></g><g transform="translate(341 466)"><path d="M0 -29L22.7 -18.1L28.3 6.5L12.6 26.1L-12.6 26.1L-28.3 6.5L-22.7 -18.1Z" stroke="#00A3C4" fill="none" stroke-width="2"/></g><g transform="translate(485 69)"><path d="M0 -34L26.6 -21.2L33.1 7.6L14.8 30.6L-14.8 30.6L-33.1 7.6L-26.6 -21.2Z" stroke="#00A3C4" fill="none" stroke-width="2"/></g><g transform="translate(455 405)"><path d="M0 -23L18 -14.3L22.4 5.1L10 20.7L-10 20.7L-22.4 5.1L-18 -14.3Z" stroke="#00A3C4" fill="none" stroke-width="2"/></g><g transform="translate(227 59)"><path d="M0 -32L25 -20L31.2 7.1L13.9 28.8L-13.9 28.8L-31.2 7.1L-25 -20Z" stroke="#00A3C4" fill="none" stroke-width="2"/></g><g transform="translate(840 339)"><path d="M0 -46L36 -28.7L44.8 10.2L20 41.4L-20 41.4L-44.8 10.2L-36 -28.7Z" stroke="#00A3C4" fill="none" stroke-width="2"/></g><g transform="translate(60 521)"><path d="M0 -53L41.4 -33L51.7 11.8L23 47.8L-23 47.8L-51.7 11.8L-41.4 -33Z" stroke="#00A3C4" fill="none" stroke-width="2"/></g><g transform="translate(604 377)"><path d="M0 -28L21.9 -17.5L27.3 6.2L12.1 25.2L-12.1 25.2L-27.3 6.2L-21.9 -17.5Z" stroke="#00A3C4" fill="none" stroke-width="2"/></g></g></svg>